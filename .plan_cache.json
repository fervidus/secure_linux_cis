{"aggregate::count":{"name":"aggregate::count","description":"Run a task, command, or script on targets and aggregate the results as\na count of targets for each value of a key.","parameters":{"command":{"type":"Optional[String[0]]","sensitive":false,"default_value":"undef","description":"The command to run. Mutually exclusive with script and task."},"script":{"type":"Optional[String[0]]","sensitive":false,"default_value":"undef","description":"The path to the script to run. Mutually exclusive with command and task."},"task":{"type":"Optional[String[0]]","sensitive":false,"default_value":"undef","description":"The name of the task to run. Mutually exclusive with command and script."},"targets":{"type":"TargetSpec","sensitive":false,"description":"The list of targets to run the action on."},"params":{"type":"Hash[String, Data]","sensitive":false,"default_value":"{}","description":"A hash of parameters and options to pass to the `run_*` function\nassociated with the action (e.g. run_task)."}},"module":"/opt/puppetlabs/bolt/lib/ruby/gems/2.7.0/gems/bolt-3.27.1/modules/aggregate","private":false,"summary":"Run a task, command, or script on targets and aggregate the results as\na count of targets for each value of a key.","docstring":"This plan accepts an action and a list of targets. The action can be the name\nof a task, a script, or a command to run. It will run the action on the\ntargets and aggregate the key/value pairs in each Result into a hash, mapping\nthe keys to a hash of each distinct value and how many targets returned that\nvalue for the key."},"aggregate::targets":{"name":"aggregate::targets","description":"Run a task, command, or script on targets and aggregate the results as\nthe list of targets for each value of a key in the results.","parameters":{"command":{"type":"Optional[String[0]]","sensitive":false,"default_value":"undef","description":"The command to run. Mutually exclusive with script and task."},"script":{"type":"Optional[String[0]]","sensitive":false,"default_value":"undef","description":"The path to the script to run. Mutually exclusive with command and task."},"task":{"type":"Optional[String[0]]","sensitive":false,"default_value":"undef","description":"The name of the task to run. Mutually exclusive with command and script."},"targets":{"type":"TargetSpec","sensitive":false,"description":"The list of targets to run the action on."},"params":{"type":"Hash[String, Data]","sensitive":false,"default_value":"{}","description":"A hash of parameters and options to pass to the `run_*` function\nassociated with the action (e.g. run_task)."}},"module":"/opt/puppetlabs/bolt/lib/ruby/gems/2.7.0/gems/bolt-3.27.1/modules/aggregate","private":false,"summary":"Run a task, command, or script on targets and aggregate the results as\nthe list of targets for each value of a key in the results.","docstring":"This plan accepts an action and a list of targets. The action can be the name\nof a task, a script, or a command to run. It will run the action on the\ntargets and aggregate the key/value pairs in each Result into a hash, mapping\nthe keys to a hash of each distinct value and a list of targets returning that\nvalue."},"canary":{"name":"canary","description":"Run a task, command or script on canary targets before running it on all targets.","parameters":{"task":{"type":"Optional[String[0]]","sensitive":false,"default_value":"undef","description":"The name of the task to run. Mutually exclusive with command and script."},"command":{"type":"Optional[String[0]]","sensitive":false,"default_value":"undef","description":"The command to run. Mutually exclusive with task and script."},"script":{"type":"Optional[String[0]]","sensitive":false,"default_value":"undef","description":"The script to run. Mutually exclusive with task and command."},"targets":{"type":"TargetSpec","sensitive":false,"description":"The target to run on."},"params":{"type":"Hash[String, Data]","sensitive":false,"default_value":"{}","description":"The parameters to use for the task."},"canary_size":{"type":"Integer","sensitive":false,"default_value":"1","description":"How many targets to use in the canary group."}},"module":"/opt/puppetlabs/bolt/lib/ruby/gems/2.7.0/gems/bolt-3.27.1/modules/canary","private":false,"summary":"Run a task, command or script on canary targets before running it on all targets.","docstring":"This plan accepts a action and a $targets parameter. The action can be the name\nof a task, a script or a command to run. It will run the action on a canary\ngroup of targets and only continue to the rest of the targets if it succeeds on\nall canaries. This returns a ResultSet object with a Result for every target.\nAny skipped targets will have a 'canary/skipped-target' error kind."},"facts":{"name":"facts","description":"A plan that retrieves facts and stores in the inventory for the\nspecified targets.","parameters":{"targets":{"type":"TargetSpec","sensitive":false,"description":"List of targets to retrieve the facts for."}},"module":"/root/test/secure_linux_cis/.modules/facts","private":false,"summary":"A plan that retrieves facts and stores in the inventory for the\nspecified targets.","docstring":null},"facts::external":{"name":"facts::external","description":"A plan that generates external facts based on the provided modulepath and\nsets facts on specified targets.","parameters":{"path":{"type":"String","sensitive":false,"description":"The path to the directory on localhost containing external facts"},"targets":{"type":"TargetSpec","sensitive":false,"description":"The targest the collect and set facts on"}},"module":"/root/test/secure_linux_cis/.modules/facts","private":false,"summary":"A plan that generates external facts based on the provided modulepath and\nsets facts on specified targets.","docstring":null},"facts::info":{"name":"facts::info","description":"A plan that prints basic OS information for the specified targets. It first\nruns the facts task to retrieve facts from the targets, then compiles the\ndesired OS information from the os fact value of each targets. This plan primarily\nprovides readable formatting, and ignores targets that error.","parameters":{"targets":{"type":"TargetSpec","sensitive":false,"description":"List of the targets for which to print the OS information."}},"module":"/root/test/secure_linux_cis/.modules/facts","private":false,"summary":"A plan that prints basic OS information for the specified targets. It first\nruns the facts task to retrieve facts from the targets, then compiles the\ndesired OS information from the os fact value of each targets. This plan primarily\nprovides readable formatting, and ignores targets that error.","docstring":null},"lvm::expand":{"name":"lvm::expand","description":"lvm::expand\n\nThis plan implements an opinionated method for expanding storage on servers\nthat use LVM. If this doesn't fit your needs, simply tie the tasks together\nin some way that does.","parameters":{"server":{"type":"String","sensitive":false,"description":"The target for the plan"},"volume_group":{"type":"String","sensitive":false,"description":"The volume group to which the logical volume belongs"},"logical_volume":{"type":"String","sensitive":false,"description":"The logical volume which is to be expanded"},"additional_size":{"type":"String","sensitive":false,"description":"How much size to add to the LV. This should be\nspecified in LVM format i.e. \"200m\" or \"2.5g\""},"disks":{"type":"Array[String]","sensitive":false,"default_value":"[]","description":"Any physical disks that should be added to the volume group as\npart of the expand process"},"resize_fs":{"type":"Boolean","sensitive":false,"default_value":"true","description":"Wheather or not to resize the filesystem"}},"module":"/root/test/secure_linux_cis/.modules/lvm","private":false,"summary":null,"docstring":"lvm::expand\n\nThis plan implements an opinionated method for expanding storage on servers\nthat use LVM. If this doesn't fit your needs, simply tie the tasks together\nin some way that does."},"ntp::acceptance::pe_agent":{"name":"ntp::acceptance::pe_agent","description":"Install PE","parameters":{},"module":"/root/test/secure_linux_cis/.modules/ntp","private":false,"summary":"Install PE","docstring":"Install PE Agent"},"ntp::acceptance::pe_server":{"name":"ntp::acceptance::pe_server","description":"Install PE Server","parameters":{"version":{"type":"Optional[String]","sensitive":false,"default_value":"'2019.8.5'"},"pe_settings":{"type":"Optional[Hash]","sensitive":false,"default_value":"{ password => 'puppetlabs' }"}},"module":"/root/test/secure_linux_cis/.modules/ntp","private":false,"summary":"Install PE Server","docstring":"Install PE Server"},"ntp::acceptance::provision_integration":{"name":"ntp::acceptance::provision_integration","description":"Provisions machines","parameters":{"image":{"type":"Optional[String]","sensitive":false,"default_value":"'centos-7'"},"provision_type":{"type":"Optional[String]","sensitive":false,"default_value":"'provision_service'"}},"module":"/root/test/secure_linux_cis/.modules/ntp","private":false,"summary":"Provisions machines","docstring":"Provisions machines for integration testing"},"puppet_agent::run":{"name":"puppet_agent::run","description":"Starts a Puppet agent run on the specified targets.\nNote: This plan may cause issues when run in Puppet Enterprise.","parameters":{"targets":{"type":"TargetSpec","sensitive":false,"description":"The targets to start a Puppet agent run on."}},"module":"/root/test/secure_linux_cis/.modules/puppet_agent","private":false,"summary":null,"docstring":"Starts a Puppet agent run on the specified targets.\nNote: This plan may cause issues when run in Puppet Enterprise."},"puppet_connect::test_input_data":{"name":"puppet_connect::test_input_data","description":"Tests that the provided Puppet Connect input data is complete, meaning that all consuming inventory targets are connectable.\nYou should run this plan with the following command:\n    PUPPET_CONNECT_INPUT_DATA=/path/to/input_data.yaml bolt plan run puppet_connect::test_input_data\nwhere /path/to/input_data.yaml is the path to the input_data.yaml file containing the key-value input for the\npuppet_connect_data plugin. If the plan fails on some targets, then you can use Bolt's --rerun option to rerun the plan on\njust the failed targets:\n    PUPPET_CONNECT_INPUT_DATA=/path/to/input_data.yaml bolt plan run puppet_connect::test_input_data --rerun failure\nNote that this plan should only be used as part of the copy-pastable \"test input data\" workflow specified in the Puppet\nConnect docs.","parameters":{"targets":{"type":"TargetSpec","sensitive":false,"default_value":"'all'","description":"The set of targets to test. Usually this should be 'all', the default."}},"module":"/opt/puppetlabs/bolt/lib/ruby/gems/2.7.0/gems/bolt-3.27.1/modules/puppet_connect","private":false,"summary":"Tests that the provided Puppet Connect input data is complete, meaning that all consuming inventory targets are connectable.\nYou should run this plan with the following command:\n    PUPPET_CONNECT_INPUT_DATA=/path/to/input_data.yaml bolt plan run puppet_connect::test_input_data\nwhere /path/to/input_data.yaml is the path to the input_data.yaml file containing the key-value input for the\npuppet_connect_data plugin. If the plan fails on some targets, then you can use Bolt's --rerun option to rerun the plan on\njust the failed targets:\n    PUPPET_CONNECT_INPUT_DATA=/path/to/input_data.yaml bolt plan run puppet_connect::test_input_data --rerun failure\nNote that this plan should only be used as part of the copy-pastable \"test input data\" workflow specified in the Puppet\nConnect docs.","docstring":"the targets. Note that this query currently consists of running the 'echo'\ncommand."},"puppetdb_fact":{"name":"puppetdb_fact","description":"Collect facts for the specified targets from PuppetDB and store them\non the Targets.","parameters":{"targets":{"type":"TargetSpec","sensitive":false,"description":"The targets to collect facts for."}},"module":"/opt/puppetlabs/bolt/lib/ruby/gems/2.7.0/gems/bolt-3.27.1/modules/puppetdb_fact","private":false,"summary":"Collect facts for the specified targets from PuppetDB and store them\non the Targets.","docstring":"This plan accepts a list of targets to collect facts for from the configured\nPuppetDB connection. After collecting facts, they are stored on each target's\nTarget object. The updated facts can then be accessed using `$target.facts`."},"reboot":{"name":"reboot","description":"Reboots targets and waits for them to be available again.","parameters":{"targets":{"type":"TargetSpec","sensitive":false,"description":"Targets to reboot."},"message":{"type":"Optional[String]","sensitive":false,"default_value":"undef","description":"Message to log with the reboot (for platforms that support it)."},"reboot_delay":{"type":"Integer[1]","sensitive":false,"default_value":"1","description":"How long (in seconds) to wait before rebooting. Defaults to 1."},"disconnect_wait":{"type":"Integer[0]","sensitive":false,"default_value":"10","description":"How long (in seconds) to wait before checking whether the server has rebooted. Defaults to 10."},"reconnect_timeout":{"type":"Integer[0]","sensitive":false,"default_value":"180","description":"How long (in seconds) to attempt to reconnect before giving up. Defaults to 180."},"retry_interval":{"type":"Integer[0]","sensitive":false,"default_value":"1","description":"How long (in seconds) to wait between retries. Defaults to 1."},"fail_plan_on_errors":{"type":"Boolean","sensitive":false,"default_value":"true","description":"Raise an error if any targets do not successfully reboot. Defaults to true."}},"module":"/root/test/secure_linux_cis/.modules/reboot","private":false,"summary":null,"docstring":"Reboots targets and waits for them to be available again."},"secure_env_vars":{"name":"secure_env_vars","description":"Run a command or script with sensitive environment variables.\nEnvironment variables are loaded from the BOLT_ENV_VARS environment\nvariable, which is a JSON object mapping environment variable names\nto values.","parameters":{"targets":{"type":"TargetSpec","sensitive":false,"description":"The targets to run the command or script on."},"command":{"type":"Optional[String]","sensitive":false,"default_value":"undef","description":"The command to run."},"script":{"type":"Optional[String]","sensitive":false,"default_value":"undef","description":"The script to run. This can be either a relative path, absolute path, or a file from a module."}},"module":"/opt/puppetlabs/bolt/lib/ruby/gems/2.7.0/gems/bolt-3.27.1/modules/secure_env_vars","private":false,"summary":null,"docstring":"Run a command or script with sensitive environment variables.\nEnvironment variables are loaded from the BOLT_ENV_VARS environment\nvariable, which is a JSON object mapping environment variable names\nto values."},"secure_linux_cis":{"name":"secure_linux_cis","description":null,"parameters":{"targets":{"type":"TargetSpec","sensitive":false},"time_servers":{"type":"Array[Stdlib::Host]","sensitive":false,"default_value":"['time.google.com']"},"profile_type":{"type":"Enum['workstation', 'server']","sensitive":false,"default_value":"'server'"}},"module":"/root/test/secure_linux_cis","private":false,"summary":null,"docstring":null,"file":{"mtime":"2023-07-14 16:14:46 +0200","path":"/root/test/secure_linux_cis/plans/init.pp"}},"terraform::apply":{"name":"terraform::apply","description":null,"parameters":{"dir":{"type":"Optional[String[1]]","sensitive":false,"default_value":"undef"},"state":{"type":"Optional[String[1]]","sensitive":false,"default_value":"undef"},"state_out":{"type":"Optional[String[1]]","sensitive":false,"default_value":"undef"},"target":{"type":"Optional[Variant[String[1], Array[String[1]]]]","sensitive":false,"default_value":"undef"},"var":{"type":"Optional[Hash]","sensitive":false,"default_value":"undef"},"var_file":{"type":"Optional[Variant[String[1], Array[String[1]]]]","sensitive":false,"default_value":"undef"},"return_output":{"type":"Optional[Boolean]","sensitive":false,"default_value":"false"}},"module":"/opt/puppetlabs/bolt/lib/ruby/gems/2.7.0/gems/bolt-3.27.1/modules/terraform","private":false,"summary":null,"docstring":null},"terraform::destroy":{"name":"terraform::destroy","description":null,"parameters":{"dir":{"type":"Optional[String[1]]","sensitive":false,"default_value":"undef"},"state":{"type":"Optional[String[1]]","sensitive":false,"default_value":"undef"},"state_out":{"type":"Optional[String[1]]","sensitive":false,"default_value":"undef"},"target":{"type":"Optional[Variant[String[1], Array[String[1]]]]","sensitive":false,"default_value":"undef"},"var":{"type":"Optional[Hash]","sensitive":false,"default_value":"undef"},"var_file":{"type":"Optional[Variant[String[1], Array[String[1]]]]","sensitive":false,"default_value":"undef"}},"module":"/opt/puppetlabs/bolt/lib/ruby/gems/2.7.0/gems/bolt-3.27.1/modules/terraform","private":false,"summary":null,"docstring":null}}